// Generated by CoffeeScript 2.3.1
(function() {
  var TextInput, m, s, style, u;

  m = require('mithril');

  s = require('mss-js');

  style = require('./style');

  u = require('./utils');

  TextInput = class TextInput {
    constructor({content: content = '', disabled: disabled = false, placeholder: placeholder = '', onChange: onChange = u.noOp, onKeyup: onKeyup = u.noOp, onEnter: onEnter = u.noOp, onClick: onClick = u.noOp}) { // String // Boolean // String // (String) -> a | Error // (String) -> a | Error // (String) -> a | Error // () -> a
      // triggered when user click the input
      this.onChangeInternal = this.onChangeInternal.bind(this);
      this.onkeyupInternal = this.onkeyupInternal.bind(this);
      this.content = content;
      this.disabled = disabled;
      this.placeholder = placeholder;
      this.onChange = onChange;
      // triggered on Blur or user stroke Enter
      this.onKeyup = onKeyup;
      // triggered when user stroke non-Enters
      this.onEnter = onEnter;
      // triggered when user stroke Enter
      this.onClick = onClick;
      this.validationMsg = ''; // String
    }

    submit() {
      if (this.validationMsg === '') {
        return this.content;
      } else {
        return new Error(this.validationMsg);
      }
    }

    validateInternal(c) {}

    onChangeInternal(e) {
      var c, err;
      c = (u.getTarget(e)).value;
      err = this.onChange(c);
      this.validationMsg = '';
      if (err instanceof Error) {
        this.validationMsg = err.message;
      }
      return this.content = c;
    }

    onkeyupInternal(e) {
      var c, err;
      c = (u.getTarget(e)).value;
      this.content = c;
      if (e.keyCode === 13 || e.key === "Enter") {
        if (this.validationMsg === '') {
          err = this.onEnter(this.content);
          if (err instanceof Error) {
            return this.validationMsg = err.message;
          }
        }
      } else {
        err = this.onKeyup(c[c.length - 1]);
        this.validationMsg = '';
        if (err instanceof Error) {
          return this.validationMsg = err.message;
        }
      }
    }

    view() {
      return m('.TextInput', m('input.Input', {
        disabled: this.disabled,
        onchange: this.onChangeInternal,
        onkeyup: this.onkeyupInternal,
        value: this.content,
        placeholder: this.placeholder,
        onclick: this.onClick
      }), this.validationMsg !== '' ? m('.ValidationMsg', this.validationMsg) : void 0);
    }

  };

  TextInput.mss = {
    TextInput: s.LineSize('1.93em', '1em')({
      // why 1.93em you may ask?
      // because it will align Dropdown, TextInput and anyother things nicely
      width: '200px',
      position: 'relative',
      Input: {
        display: 'block',
        border: '1px solid ' + style.border[4],
        width: '100%',
        height: '100%',
        fontSize: '1em',
        padding: '0 0.4em',
        WebkitAppearance: 'none',
        borderRadius: 0
      },
      ValidationMsg: {
        background: style.warn[5],
        color: style.text[8],
        position: 'absolute',
        top: 0,
        left: '100%',
        textAlign: 'center',
        width: '200px',
        zIndex: 99,
        $before: {
          content: '""',
          position: 'absolute',
          top: 0,
          left: '-2em',
          width: 0,
          height: 0,
          border: '1em solid transparent',
          borderRight: '1em solid ' + style.warn[5]
        }
      }
    })
  };

  module.exports = TextInput;

}).call(this);
