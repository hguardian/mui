// Generated by CoffeeScript 2.3.0
(function() {
  var TagInput, TextInput, m, s, style, u;

  m = require('mithril');

  s = require('mss-js');

  style = require('./style');

  u = require('./utils');

  TextInput = require('./TextInput');

  TagInput = class TagInput {
    constructor({tagList: tagList = [], placeholder = '', onAdd: onAdd = u.noOp, onDel: onDel = u.noOp}) { // String, placeholder of tag input // (String) -> a, triggered on tag adding // (Int) -> a, triggered on tag deleting
      this.addTag = this.addTag.bind(this);
      this.delTag = this.delTag.bind(this);
      this.tagList = tagList; // List of String
      this.onAdd = onAdd;
      this.onDel = onDel;
      this.tagInput = new TextInput({
        content: '',
        placeholder: placeholder,
        onEnter: this.addTag
      });
    }

    addTag(tag) {
      if ((this.tagList.indexOf(tag) === -1) && (tag !== '')) {
        this.tagList.push(tag);
        this.onAdd(tag);
        return this.tagInput.content = '';
      }
    }

    delTag(e) {
      var i, tag;
      tag = u.getTargetData(e, 'tag');
      i = this.tagList.indexOf(tag);
      if (i !== -1) {
        this.tagList.splice(i, 1);
        return this.onDel(i);
      }
    }

    view() {
      var tag;
      return m('.TagInput', (function() {
        var j, len, ref, results;
        ref = this.tagList;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          tag = ref[j];
          results.push(m('.TagItem', m('span', tag), m('.DelBtn', {
            'data-tag': tag,
            onclick: this.delTag
          }, 'âœ•')));
        }
        return results;
      }).call(this), this.tagInput.view());
    }

  };

  TagInput.mss = s.merge([
    TextInput.mss,
    {
      TagInput: {
        TagItem: {
          display: 'inline-block',
          border: '1px solid ' + style.border[4],
          color: style.text[0],
          padding: '4px 12px',
          margin: '0 4px',
          DelBtn: {
            display: 'inline-block',
            marginLeft: '12px',
            color: style.main[4],
            cursor: 'pointer',
            $hover: {
              color: style.warn[4]
            }
          }
        },
        TextInput: {
          display: 'inline-block',
          width: '100px'
        }
      }
    }
  ]);

  module.exports = TagInput;

}).call(this);
